{"version":3,"sources":["jsonc.tests.es6"],"names":[],"mappings":"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","file":"jsonc.tests.js","sourcesContent":["import \"babel-polyfill\";\r\nimport chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport json5 from 'json5';\r\nimport Jsonc from './jsonc';\r\nimport Serializer from './serializer';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nchai.use(chaiThings);\r\n\r\ndescribe(\"Jsonc\", () => {\r\n  describe('.hasType()', () => {\r\n\r\n    it('returns false if the class type has not been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.hasType({__type__: 'test'}).should.be.false;\r\n    });\r\n\r\n    it('returns true if the class type has been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.registry.test = 1;\r\n      jsonc.hasType({__type__: 'test'}).should.be.true;\r\n    });\r\n\r\n  });\r\n\r\n  describe('.hasTypeName()', () => {\r\n\r\n    it('returns false if the class type has not been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.hasTypeName('test').should.be.false;\r\n    });\r\n\r\n    it('returns true if the class type has been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.registry.test = 1;\r\n      jsonc.hasTypeName('test').should.be.true;\r\n    });\r\n\r\n  });\r\n\r\n  describe('.stringify()', () => {\r\n\r\n    it('returns a serialized, stringified version of the supplied data', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.serialize = (data) => data;\r\n      const data = {test: 123};\r\n      jsonc.stringify(data).should.equal(json5.stringify(data));\r\n    });\r\n\r\n  });\r\n\r\n  describe('.parse()', () => {\r\n\r\n    it('returns a deserialized version of the supplied JSON5', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.deserialize = (data) => data;\r\n      const data = {test: 123};\r\n      jsonc.parse(json5.stringify(data)).should.eql(data);\r\n    });\r\n\r\n  });\r\n\r\n  describe('.serialize()', () => {\r\n\r\n    it('passes the call on to the Serializer class', () => {\r\n      const oldSerialize = Serializer.prototype.serialize;\r\n\r\n      const testData = {};\r\n      let wasCalledWithData = false;\r\n      Serializer.prototype.serialize = (data) => wasCalledWithData = testData === data;\r\n      const jsonc = new Jsonc();\r\n      jsonc.serialize(testData);\r\n      wasCalledWithData.should.be.true;\r\n\r\n      Serializer.prototype.serialize = oldSerialize;\r\n    });\r\n\r\n  });\r\n\r\n  describe(\".deserialize()\", () => {\r\n\r\n    it('passes the call on to the Deserializer class', () => {\r\n      const oldDeserialize = Deserializer.prototype.deserialize;\r\n\r\n      const testData = {};\r\n      let wasCalledWithData = false;\r\n      Deserializer.prototype.deserialize = (data) => wasCalledWithData = testData === data;\r\n      const jsonc = new Jsonc();\r\n      jsonc.deserialize(testData);\r\n      wasCalledWithData.should.be.true;\r\n\r\n      Deserializer.prototype.deserialize = oldDeserialize;\r\n    });\r\n  });\r\n\r\n  describe(\".register()\", () => {\r\n\r\n    it('registers the supplied \"class\" using the __type__ property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass);\r\n      jsonc.registry['test'].should.equal(TestClass);\r\n    });\r\n\r\n    it('registers the supplied \"class\" using the supplied type name', () => {\r\n      class TestClass {\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass, 'test');\r\n      jsonc.registry['test'].should.equal(TestClass);\r\n    });\r\n\r\n    it(`should set the class's __type__ property to the supplied type name`, () => {\r\n      class TestClass {\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass, 'test');\r\n      TestClass.__type__.should.equal('test');\r\n    });\r\n\r\n  });\r\n});\r\n"]}
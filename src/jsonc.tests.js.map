{"version":3,"sources":["jsonc.tests.es6"],"names":[],"mappings":"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","file":"jsonc.tests.js","sourcesContent":["'use strict';\r\n\r\nimport \"babel-polyfill\";\r\nimport chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport json5 from 'json5';\r\nimport Jsonc from './jsonc';\r\nimport Serializer from './serializer';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nchai.use(chaiThings);\r\n\r\ndescribe(\"Jsonc\", () => {\r\n  describe('.hasType()', () => {\r\n\r\n    it('returns false if the class type has not been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.hasType({__type__: 'test'}).should.be.false;\r\n    });\r\n\r\n    it('returns true if the class type has been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.registry.test = 1;\r\n      jsonc.hasType({__type__: 'test'}).should.be.true;\r\n    });\r\n\r\n  });\r\n\r\n  describe('.hasTypeName()', () => {\r\n\r\n    it('returns false if the class type has not been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.hasTypeName('test').should.be.false;\r\n    });\r\n\r\n    it('returns true if the class type has been registered', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.registry.test = 1;\r\n      jsonc.hasTypeName('test').should.be.true;\r\n    });\r\n\r\n  });\r\n\r\n  describe('.stringify()', () => {\r\n\r\n    it('returns a serialized, stringified version of the supplied data', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.serialize = (data) => data;\r\n      const data = {test: 123};\r\n      jsonc.stringify(data).should.equal(json5.stringify(data));\r\n    });\r\n\r\n  });\r\n\r\n  describe('.parse()', () => {\r\n\r\n    it('returns a deserialized version of the supplied JSON5', ()=> {\r\n      const jsonc = new Jsonc();\r\n      jsonc.deserialize = (data) => data;\r\n      const data = {test: 123};\r\n      jsonc.parse(json5.stringify(data)).should.eql(data);\r\n    });\r\n\r\n  });\r\n\r\n  describe('.serialize()', () => {\r\n\r\n    it('passes the call on to the Serializer class', () => {\r\n      const oldSerialize = Serializer.prototype.serialize;\r\n\r\n      const testData = {};\r\n      let wasCalledWithData = false;\r\n      Serializer.prototype.serialize = (data) => wasCalledWithData = testData === data;\r\n      const jsonc = new Jsonc();\r\n      jsonc.serialize(testData);\r\n      wasCalledWithData.should.be.true;\r\n\r\n      Serializer.prototype.serialize = oldSerialize;\r\n    });\r\n\r\n  });\r\n\r\n  describe(\".deserialize()\", () => {\r\n\r\n    it('passes the call on to the Deserializer class', () => {\r\n      const oldDeserialize = Deserializer.prototype.deserialize;\r\n\r\n      const testData = {};\r\n      let wasCalledWithData = false;\r\n      Deserializer.prototype.deserialize = (data) => wasCalledWithData = testData === data;\r\n      const jsonc = new Jsonc();\r\n      jsonc.deserialize(testData);\r\n      wasCalledWithData.should.be.true;\r\n\r\n      Deserializer.prototype.deserialize = oldDeserialize;\r\n    });\r\n  });\r\n\r\n  describe(\".register()\", () => {\r\n\r\n    it('registers the supplied \"class\" using the __type__ property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass);\r\n      jsonc.registry['test'].type.should.equal(TestClass);\r\n    });\r\n\r\n    it('registers the supplied \"class\" using the supplied type name', () => {\r\n      class TestClass {\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass, 'test');\r\n      jsonc.registry['test'].type.should.equal(TestClass);\r\n    });\r\n\r\n    it(`should set the class's __type__ property to the supplied type name`, () => {\r\n      class TestClass {\r\n      }\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass, 'test');\r\n      TestClass.__type__.should.equal('test');\r\n    });\r\n\r\n    it('should register the options with the type', () => {\r\n      class TestClass {\r\n      }\r\n      const options = {};\r\n\r\n      const jsonc = new Jsonc();\r\n      jsonc.register(TestClass, 'test', options);\r\n      jsonc.registry['test'].options.should.equal(options);\r\n    });\r\n\r\n    describe('.getOptions()', () => {\r\n      it('should return the registered options', () => {\r\n        class TestClass {\r\n        }\r\n        const options = { test: 'test'};\r\n\r\n        const jsonc = new Jsonc();\r\n        jsonc.register(TestClass, 'test', options);\r\n        jsonc.getOptions('test').test.should.equal(options.test);\r\n      });\r\n\r\n      it('should return the registered options merged with those of the parent', () => {\r\n        class ParentClass {\r\n        }\r\n        class ChildClass extends ParentClass {\r\n        }\r\n        const parentOptions = {exclude: ['test']};\r\n        const childOptions = {include: ['test2']};\r\n\r\n        const jsonc = new Jsonc();\r\n        jsonc.register(ParentClass, 'parent', parentOptions);\r\n        jsonc.register(ChildClass, 'child', childOptions);\r\n        const options = jsonc.getOptions('child');\r\n        options.exclude.should.equal(parentOptions.exclude);\r\n        options.include.should.eql(childOptions.include);\r\n      });\r\n    });\r\n\r\n  });\r\n});\r\n"]}
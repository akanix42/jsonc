{"version":3,"sources":["serializer.tests.es6"],"names":[],"mappings":"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","file":"serializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport json5 from 'json5';\r\nimport Serializer from './serializer';\r\n\r\nchai.should();\r\n\r\ndescribe('Serializer', () => {\r\n  describe('.serialize()', () => {\r\n\r\n    it('serializes empty objects', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({}));\r\n\r\n      output.should.equal('{instances:[],root:{}}');\r\n    });\r\n\r\n    it('serializes string properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 'test'}));\r\n\r\n      output.should.equal('{instances:[],root:{a:\"test\"}}');\r\n    });\r\n\r\n    it('serializes boolean properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: true}));\r\n\r\n      output.should.equal('{instances:[],root:{a:true}}');\r\n    });\r\n\r\n    it('serializes number properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 1}));\r\n\r\n      output.should.equal('{instances:[],root:{a:1}}');\r\n    });\r\n\r\n    it('serializes an array', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize([1, 2]));\r\n\r\n      output.should.equal('{instances:[],root:[1,2]}');\r\n    });\r\n\r\n    it('serializes nested objects', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {a: 1, b: {c: 'test'}};\r\n      const output = json5.stringify(serializer.serialize(obj));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{c:\"test\"}}],root:{a:1,b:{__index__:0}}}');\r\n    });\r\n\r\n    it('serializes registered types', () => {\r\n      const mockJsonc = {hasType: () => true};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('stores references to an object instead of multiple copies', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {};\r\n      const output = json5.stringify(serializer.serialize([obj, obj, obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{}}],root:[{__index__:0},{__index__:0},{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of registered types via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => true};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of plain objects via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      };\r\n      const output = json5.stringify(serializer.serialize({obj}));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{test:\"123\"}}],root:{obj:{__index__:0}}}');\r\n    });\r\n\r\n  });\r\n});"]}
{"version":3,"sources":["serializer.tests.es6"],"names":[],"mappings":"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","file":"serializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport json5 from 'json5';\r\nimport Serializer from './serializer';\r\n\r\nchai.should();\r\n\r\ndescribe('Serializer', () => {\r\n  describe('.serialize()', () => {\r\n\r\n    it('serializes empty objects', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({}));\r\n\r\n      output.should.equal('{instances:[],root:{}}');\r\n    });\r\n\r\n    it('serializes string properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 'test'}));\r\n\r\n      output.should.equal('{instances:[],root:{a:\"test\"}}');\r\n    });\r\n\r\n    it('serializes boolean properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: true}));\r\n\r\n      output.should.equal('{instances:[],root:{a:true}}');\r\n    });\r\n\r\n    it('serializes number properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 1}));\r\n\r\n      output.should.equal('{instances:[],root:{a:1}}');\r\n    });\r\n\r\n    it('serializes an array', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize([1, 2]));\r\n\r\n      output.should.equal('{instances:[],root:[1,2]}');\r\n    });\r\n\r\n    it('serializes nested objects', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {a: 1, b: {c: 'test'}};\r\n      const output = json5.stringify(serializer.serialize(obj));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{c:\"test\"}}],root:{a:1,b:{__index__:0}}}');\r\n    });\r\n\r\n    it('serializes registered types', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': {}}};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('stores references to an object instead of multiple copies', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {};\r\n      const output = json5.stringify(serializer.serialize([obj, obj, obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{}}],root:[{__index__:0},{__index__:0},{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of registered types via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': {}}};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of plain objects via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      };\r\n      const output = json5.stringify(serializer.serialize({obj}));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{test:\"123\"}}],root:{obj:{__index__:0}}}');\r\n    });\r\n\r\n    it('allows excluding specified properties from serialization', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': { options: { exclude: ['test']}}}};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('allows including only specified properties in serialization', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': { options: { include: ['test2']}}}};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n        test2 = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test2:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n  });\r\n});"]}
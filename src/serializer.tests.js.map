{"version":3,"sources":["serializer.tests.es6"],"names":[],"mappings":"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","file":"serializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport json5 from 'json5';\r\nimport Serializer from './serializer';\r\n\r\nchai.should();\r\n\r\ndescribe('Serializer', () => {\r\n  describe('.serialize()', () => {\r\n\r\n    it('serializes empty objects', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({}));\r\n\r\n      output.should.equal('{instances:[],root:{}}');\r\n    });\r\n\r\n    it('serializes string properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 'test'}));\r\n\r\n      output.should.equal('{instances:[],root:{a:\"test\"}}');\r\n    });\r\n\r\n    it('serializes boolean properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: true}));\r\n\r\n      output.should.equal('{instances:[],root:{a:true}}');\r\n    });\r\n\r\n    it('serializes number properties', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize({a: 1}));\r\n\r\n      output.should.equal('{instances:[],root:{a:1}}');\r\n    });\r\n\r\n    it('serializes an array', () => {\r\n      const serializer = new Serializer();\r\n      const output = json5.stringify(serializer.serialize([1, 2]));\r\n\r\n      output.should.equal('{instances:[],root:[1,2]}');\r\n    });\r\n\r\n    it('serializes a Map', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const output = json5.stringify(serializer.serialize([new Map([[1,2]])]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__native_map__\",__value__:[{__index__:1}]},{__type__:\"__array__\",__value__:[1,2]}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('serializes a Set', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const output = json5.stringify(serializer.serialize([new Set([1, 2])]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__native_set__\",__value__:[1,2]}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('serializes nested objects', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {a: 1, b: {c: 'test'}};\r\n      const output = json5.stringify(serializer.serialize(obj));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{c:\"test\"}}],root:{a:1,b:{__index__:0}}}');\r\n    });\r\n\r\n    it('serializes registered types', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': {}}, getOptions: ()=>null};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('stores references to an object instead of multiple copies', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {};\r\n      const output = json5.stringify(serializer.serialize([obj, obj, obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{}}],root:[{__index__:0},{__index__:0},{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of registered types via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => true, registry: {'test': {}}, getOptions: ()=>null};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('allows serialization overriding of plain objects via the Serializer.Symbols.Serialize property', () => {\r\n      const mockJsonc = {hasType: () => false};\r\n      const serializer = new Serializer(mockJsonc);\r\n      const obj = {\r\n        [Serializer.Symbols.Serialize]() {\r\n          return {test: '123'};\r\n        }\r\n      };\r\n      const output = json5.stringify(serializer.serialize({obj}));\r\n\r\n      output.should.equal('{instances:[{__type__:\"__object__\",__value__:{test:\"123\"}}],root:{obj:{__index__:0}}}');\r\n    });\r\n\r\n    it('allows excluding specified properties from serialization', () => {\r\n      const serializationOptions = {exclude: ['test']};\r\n      const mockJsonc = {hasType: () => true, getOptions: ()=>serializationOptions};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n    it('allows including only specified properties in serialization', () => {\r\n      const serializationOptions = {include: ['test2']};\r\n      const mockJsonc = {hasType: () => true, getOptions: ()=>serializationOptions};\r\n      const serializer = new Serializer(mockJsonc);\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n        test2 = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      const output = json5.stringify(serializer.serialize([obj]));\r\n\r\n      output.should.equal('{instances:[{__type__:\"test\",__value__:{test2:\"123\"}}],root:[{__index__:0}]}');\r\n    });\r\n\r\n  });\r\n});\r\n"]}
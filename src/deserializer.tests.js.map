{"version":3,"sources":["deserializer.tests.es6"],"names":[],"mappings":"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","file":"deserializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nchai.use(chaiThings);\r\n\r\ndescribe('Deserializer', () => {\r\n  describe('.deserialize()', () => {\r\n\r\n    it('deserializes empty objects', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({});\r\n    });\r\n\r\n    it('deserializes string properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 'test'}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 'test'});\r\n    });\r\n\r\n    it('deserializes boolean properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: true}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: true});\r\n    });\r\n\r\n    it('deserializes number properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 1}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1});\r\n    });\r\n\r\n    it('deserializes an array', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: [1, 2]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes nested objects', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {c: \"test\"}}], root: {a: 1, b: {__index__: 0}}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1, b: {c: 'test'}});\r\n    });\r\n\r\n    it('deserializes object references to the same object instance', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{__type__: \"__object__\", __value__: {}}],\r\n        root: [{__index__: 0}, {__index__: 0}, {__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      const obj = output[0];\r\n      output.should.all.equal(obj);\r\n    });\r\n\r\n    it('deserializes registered types', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: TestClass}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].should.be.an.instanceOf(TestClass);\r\n    });\r\n\r\n    it('allows post-processing of registered types via the Deserializer.Symbols.PostProcess property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n\r\n        [Deserializer.Symbols.PostProcess]() {\r\n          this.test = 'cats!';\r\n        }\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: TestClass}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].test.should.equal('cats!');\r\n    });\r\n\r\n  });\r\n});"]}
{"version":3,"sources":["deserializer.tests.es6"],"names":[],"mappings":"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","file":"deserializer.tests.js","sourcesContent":["import chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nconst expect = chai.expect;\r\nchai.use(chaiThings);\r\n\r\ndescribe('Deserializer', () => {\r\n  describe('.deserialize()', () => {\r\n\r\n    it('deserializes empty objects', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({});\r\n    });\r\n\r\n    it('deserializes string properties', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {a: \"test\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 'test'});\r\n    });\r\n\r\n    it('deserializes boolean properties', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {a: true}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: true});\r\n    });\r\n\r\n    it('deserializes number properties', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {a: 1}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1});\r\n    });\r\n\r\n    it('deserializes an Array', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__array__\", __value__: [1, 2]}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes an Array with extra properties', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{__type__: \"__array__\", __value__: {__array__: [1, 2], __props__: {test: \"123\"}}}],\r\n        root: [{__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      const array = [1, 2];\r\n      array.test = '123';\r\n      output.should.eql(array);\r\n    });\r\n\r\n    it('deserializes a Map', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{__type__: \"__native_map__\", __value__: [{__index__: 1}]}, {\r\n          __type__: \"__array__\",\r\n          __value__: [1, 2]\r\n        }], root: [{__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.be.an.instanceOf(Map);\r\n      [...output].should.eql([[1, 2]]);\r\n    });\r\n\r\n    it('deserializes a Set', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__native_set__\", __value__: [1, 2]}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.be.an.instanceOf(Set);\r\n      [...output].should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes nested objects', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{\r\n          __type__: \"__object__\",\r\n          __value__: {a: 1, b: {__index__: 1}}\r\n        }, {__type__: \"__object__\", __value__: {c: \"test\"}}], root: [{__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1, b: {c: 'test'}});\r\n    });\r\n\r\n    it('deserializes object references to the same object instance', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{\r\n          __type__: \"__array__\",\r\n          __value__: [{__index__: 1}, {__index__: 1}, {__index__: 1}]\r\n        }, {__type__: \"__object__\", __value__: {}}], root: [{__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      const obj = output[0];\r\n      output.should.all.equal(obj);\r\n    });\r\n\r\n    it('deserializes registered types', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.be.an.instanceOf(TestClass);\r\n      expect(output.test).to.equal('123');\r\n    });\r\n\r\n    it('deserializes registered types that extend Array', () => {\r\n      class TestClass extends Array {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n      const obj = new TestClass();\r\n      obj.push(1);\r\n      obj.push(2);\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances:[{__type__:\"test\",__value__:{__array__:[1,2],__props__:{test:\"123\"}}}],root:[{__index__:0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      expect(output).to.be.an.instanceOf(TestClass);\r\n      expect(output.test).to.equal('123');\r\n      expect(output[0]).to.equal(1);\r\n      expect(output[1]).to.equal(2);\r\n    });\r\n\r\n    it('allows post-processing of registered types via the Deserializer.Symbols.PostProcess property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n\r\n        [Deserializer.Symbols.PostProcess]() {\r\n          this.test = 'cats!';\r\n        }\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.test.should.equal('cats!');\r\n    });\r\n\r\n  });\r\n});\r\n"]}
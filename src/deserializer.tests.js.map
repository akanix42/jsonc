{"version":3,"sources":["deserializer.tests.es6"],"names":[],"mappings":"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","file":"deserializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nchai.use(chaiThings);\r\n\r\ndescribe('Deserializer', () => {\r\n  describe('.deserialize()', () => {\r\n\r\n    it('deserializes empty objects', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({});\r\n    });\r\n\r\n    it('deserializes string properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 'test'}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 'test'});\r\n    });\r\n\r\n    it('deserializes boolean properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: true}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: true});\r\n    });\r\n\r\n    it('deserializes number properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 1}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1});\r\n    });\r\n\r\n    it('deserializes an array', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: [1, 2]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes a Map', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances:[{__type__:\"__native_map__\",__value__:[{__index__:1}]},{__type__:\"__array__\",__value__:[1,2]}],root:[{__index__:0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].should.be.an.instanceOf(Map);\r\n      [...output[0]].should.eql([[1, 2]]);\r\n    });\r\n\r\n    it('deserializes a Set', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances:[{__type__:\"__native_set__\",__value__:[1,2]}],root:[{__index__:0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].should.be.an.instanceOf(Set);\r\n      [...output[0]].should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes nested objects', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {c: \"test\"}}], root: {a: 1, b: {__index__: 0}}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1, b: {c: 'test'}});\r\n    });\r\n\r\n    it('deserializes object references to the same object instance', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{__type__: \"__object__\", __value__: {}}],\r\n        root: [{__index__: 0}, {__index__: 0}, {__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      const obj = output[0];\r\n      output.should.all.equal(obj);\r\n    });\r\n\r\n    it('deserializes registered types', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].should.be.an.instanceOf(TestClass);\r\n    });\r\n\r\n    it('allows post-processing of registered types via the Deserializer.Symbols.PostProcess property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n\r\n        [Deserializer.Symbols.PostProcess]() {\r\n          this.test = 'cats!';\r\n        }\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].test.should.equal('cats!');\r\n    });\r\n\r\n  });\r\n});\r\n"]}
{"version":3,"sources":["deserializer.tests.es6"],"names":[],"mappings":"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","file":"deserializer.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport chaiThings from 'chai-things';\r\nimport Deserializer from './deserializer';\r\n\r\nchai.should();\r\nchai.use(chaiThings);\r\n\r\ndescribe('Deserializer', () => {\r\n  describe('.deserialize()', () => {\r\n\r\n    it('deserializes empty objects', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({});\r\n    });\r\n\r\n    it('deserializes string properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 'test'}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 'test'});\r\n    });\r\n\r\n    it('deserializes boolean properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: true}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: true});\r\n    });\r\n\r\n    it('deserializes number properties', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: {a: 1}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1});\r\n    });\r\n\r\n    it('deserializes an array', () => {\r\n      const deserializer = new Deserializer();\r\n      const input = {instances: [], root: [1, 2]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql([1, 2]);\r\n    });\r\n\r\n    it('deserializes nested objects', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"__object__\", __value__: {c: \"test\"}}], root: {a: 1, b: {__index__: 0}}};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output.should.eql({a: 1, b: {c: 'test'}});\r\n    });\r\n\r\n    it('deserializes object references to the same object instance', () => {\r\n      const mockJsonc = {hasTypeName: () => false};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {\r\n        instances: [{__type__: \"__object__\", __value__: {}}],\r\n        root: [{__index__: 0}, {__index__: 0}, {__index__: 0}]\r\n      };\r\n      const output = deserializer.deserialize(input);\r\n\r\n      const obj = output[0];\r\n      output.should.all.equal(obj);\r\n    });\r\n\r\n    it('deserializes registered types', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].should.be.an.instanceOf(TestClass);\r\n    });\r\n\r\n    it('allows post-processing of registered types via the Deserializer.Symbols.PostProcess property', () => {\r\n      class TestClass {\r\n        static __type__ = 'test';\r\n        test = '123';\r\n\r\n        [Deserializer.Symbols.PostProcess]() {\r\n          this.test = 'cats!';\r\n        }\r\n      }\r\n\r\n      const mockJsonc = {hasTypeName: () => true, registry: {test: {type: TestClass}}};\r\n      const deserializer = new Deserializer(mockJsonc);\r\n      const input = {instances: [{__type__: \"test\", __value__: {test: \"123\"}}], root: [{__index__: 0}]};\r\n      const output = deserializer.deserialize(input);\r\n\r\n      output[0].test.should.equal('cats!');\r\n    });\r\n\r\n  });\r\n});"]}
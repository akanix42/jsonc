{"version":3,"sources":["annotations.tests.es6"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,eAAK,MAAL;;AAGA,SAAS,aAAT,EAAwB,YAAM;AAC5B,WAAS,cAAT,EAAyB,YAAM;AAC7B,QAAI,kBAAJ;AACA,eAAW,YAAK;AACd,kBAAY;AACV,gBADU,sBACC,CACV;AAFS,OAAZ;AAID,KALD;;AAOA,OAAG,oCAAH,EAAyC,YAAM;AAAA;;AAC7C,UAAM,eAAe,MAArB;AACA,UAAI,gCAAgC,KAApC;AACA,UAAM,YAAY,EAAE,UAAU,kBAAC,WAAD,EAAc,QAAd;AAAA,iBAA2B,gCAAgC,YAAY,IAAZ,KAAoB,WAApB,IAAmC,aAAa,YAA3G;AAAA,SAAZ,EAAlB;;AAH6C,yBAIpB,2BAAY,SAAZ,CAJoB;;AAAA,UAIrC,YAJqC,gBAIrC,YAJqC;AAAA,UAOvC,SAPuC,WAM5C,aAAa,YAAb,CAN4C,yBAOvC,SAPuC;AAAA,8BAOvC,SAPuC;AAAA;;;AAU7C,oCAA8B,MAA9B,CAAqC,EAArC,CAAwC,IAAxC;AACD,KAXD;;AAaA,OAAG,iDAAH,EAAsD,YAAM;AAAA;;AAC1D,UAAM,eAAe,MAArB;AACA,UAAM,cAAc,EAApB;AACA,UAAI,4BAA4B,KAAhC;AACA,UAAM,YAAY,EAAE,UAAU,kBAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB;AAAA,iBAAoC,4BAA4B,YAAY,IAAZ,KAAoB,WAApB,IAAmC,aAAa,YAAhD,IAAgE,YAAY,WAA5I;AAAA,SAAZ,EAAlB;;AAJ0D,0BAKjC,2BAAY,SAAZ,CALiC;;AAAA,UAKlD,YALkD,iBAKlD,YALkD;AAAA,UAQpD,SARoD,YAOzD,aAAa,YAAb,EAA2B,WAA3B,CAPyD,2BAQpD,SARoD;AAAA,8BAQpD,SARoD;AAAA;;;AAW1D,gCAA0B,MAA1B,CAAiC,EAAjC,CAAoC,IAApC;AACD,KAZD;;AAcA,OAAG,oDAAH,EAAyD,YAAM;AAAA,0BACpC,4BADoC;;AAAA,UACrD,YADqD,iBACrD,YADqD;;;AAG7D,mBAAa,MAAb,CAAoB,KAApB,CAA0B,4BAA1B;AACD,KAJD;;AAMA,OAAG,oDAAH,EAAyD,YAAM;AAAA,0BACpC,4BADoC;;AAAA,UACrD,YADqD,iBACrD,YADqD;;;AAG7D,UAAI;AAAA;;AAAA,YAEI,SAFJ,GACD,YADC,oBAEI,SAFJ;AAAA,gCAEI,SAFJ;AAAA;AAIH,OAJD,CAIE,OAAO,EAAP,EAAW;AACX,WAAG,OAAH,CAAW,MAAX,CAAkB,KAAlB,CAAwB,4BAAxB;AACD;AACF,KAVD;AAWD,GArDD;AAsDD,CAvDD","file":"annotations.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport annotations from './annotations';\r\nimport autobind from 'autobind-decorator'\r\n\r\nchai.should();\r\n\r\n\r\ndescribe('Annotations', () => {\r\n  describe('serializable', () => {\r\n    let mockJsonc;\r\n    beforeEach(()=> {\r\n      mockJsonc = {\r\n        register() {\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should register the supplied class', () => {\r\n      const testTypeName = 'Test';\r\n      let wasCalledWithClassAndTypeName = false;\r\n      const mockJsonc = { register: (constructor, typeName) => wasCalledWithClassAndTypeName = constructor.name ==='TestClass' && typeName === testTypeName};\r\n      const { serializable } = annotations(mockJsonc);\r\n\r\n      @serializable(testTypeName)\r\n      class TestClass {\r\n      }\r\n\r\n      wasCalledWithClassAndTypeName.should.be.true;\r\n    });\r\n\r\n    it('should register the supplied class with options', () => {\r\n      const testTypeName = 'Test';\r\n      const testOptions = {};\r\n      let wasCalledWithAllArguments = false;\r\n      const mockJsonc = { register: (constructor, typeName, options) => wasCalledWithAllArguments = constructor.name ==='TestClass' && typeName === testTypeName && options === testOptions};\r\n      const { serializable } = annotations(mockJsonc);\r\n\r\n      @serializable(testTypeName, testOptions)\r\n      class TestClass {\r\n      }\r\n\r\n      wasCalledWithAllArguments.should.be.true;\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      serializable.should.throw(/type name must be supplied/);\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      try {\r\n        @serializable\r\n        class TestClass {\r\n        }\r\n      } catch (ex) {\r\n        ex.message.should.match(/type name must be supplied/);\r\n      }\r\n    });\r\n  });\r\n});"]}
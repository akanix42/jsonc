{"version":3,"sources":["annotations.tests.es6"],"names":[],"mappings":";;AAAA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,eAAK,MAAL;AACA,MAAM,SAAS,eAAK,MAApB;;AAEA,SAAS,aAAT,EAAwB,MAAM;AAC5B,WAAS,cAAT,EAAyB,MAAM;AAC7B,QAAI,SAAJ;AACA,eAAW,MAAK;AACd,kBAAY;AACV,mBAAW,CACV;AAFS,OAAZ;AAID,KALD;;AAOA,OAAG,oCAAH,EAAyC,MAAM;AAAA;;AAC7C,YAAM,eAAe,MAArB;AACA,UAAI,gCAAgC,KAApC;AACA,YAAM,YAAY,EAAE,UAAU,CAAC,WAAD,EAAc,QAAd,KAA2B,gCAAgC,YAAY,IAAZ,KAAoB,WAApB,IAAmC,aAAa,YAAvH,EAAlB;AACA,YAAM,EAAE,YAAF,KAAmB,2BAAY,SAAZ,CAAzB;;AAJ6C,UAOvC,SAPuC,WAM5C,aAAa,YAAb,CAN4C,gBAO7C,MAAM,SAAN,CAAgB,EAP6B;;;AAU7C,oCAA8B,MAA9B,CAAqC,EAArC,CAAwC,IAAxC;AACD,KAXD;;AAaA,OAAG,iDAAH,EAAsD,MAAM;AAAA;;AAC1D,YAAM,eAAe,MAArB;AACA,YAAM,cAAc,EAApB;AACA,UAAI,4BAA4B,KAAhC;AACA,YAAM,YAAY,EAAE,UAAU,CAAC,WAAD,EAAc,QAAd,EAAwB,OAAxB,KAAoC,4BAA4B,YAAY,IAAZ,KAAoB,WAApB,IAAmC,aAAa,YAAhD,IAAgE,YAAY,WAAxJ,EAAlB;AACA,YAAM,EAAE,YAAF,KAAmB,2BAAY,SAAZ,CAAzB;;AAL0D,UAQpD,SARoD,YAOzD,aAAa,YAAb,EAA2B,WAA3B,CAPyD,kBAQ1D,MAAM,SAAN,CAAgB,EAR0C;;;AAW1D,gCAA0B,MAA1B,CAAiC,EAAjC,CAAoC,IAApC;AACD,KAZD;;AAcA,OAAG,oDAAH,EAAyD,MAAM;AAC7D,YAAM,EAAE,YAAF,KAAmB,4BAAzB;;AAEA,mBAAa,MAAb,CAAoB,KAApB,CAA0B,4BAA1B;AACD,KAJD;;AAMA,OAAG,oDAAH,EAAyD,MAAM;AAC7D,YAAM,EAAE,YAAF,KAAmB,4BAAzB;;AAEA,UAAI;AAAA;;AAAA,YAEI,SAFJ,GACD,YADC,WAEF,MAAM,SAAN,CAAgB,EAFd;AAIH,OAJD,CAIE,OAAO,EAAP,EAAW;AACX,WAAG,OAAH,CAAW,MAAX,CAAkB,KAAlB,CAAwB,4BAAxB;AACD;AACF,KAVD;AAWD,GArDD;AAsDA,WAAS,SAAT,EAAoB,MAAM;AACxB,OAAG,8BAAH,EAAoC,IAAD,IAAU;AAAA;;AAE3C,YAAM,YAAY;AAChB,0BAAkB,CAAC,EAAD,EAAK,IAAL,EAAW,GAAX,KAAmB;AACnC,iBAAO,EAAP,EAAW,EAAX,CAAc,EAAd,CAAiB,CAAjB,CAAmB,UAAnB;AACA,iBAAO,GAAG,IAAV,EAAgB,EAAhB,CAAmB,KAAnB,CAAyB,cAAzB;AACA,iBAAO,KAAK,WAAL,CAAiB,IAAxB,EAA8B,EAA9B,CAAiC,KAAjC,CAAuC,WAAvC;AACA,iBAAO,GAAP,EAAY,EAAZ,CAAe,KAAf,CAAqB,cAArB;AACA;AACD;AAPe,OAAlB;AASA,YAAM,EAAC,OAAD,KAAY,2BAAY,SAAZ,CAAlB;;AAX2C,UAarC,SAbqC,cAa3C,MAAM,SAAN,CAAgB;AAEd,uBAAc,CAAE;AAFF,OAb2B,iEAcxC,OAdwC;AAkB5C,KAlBD;AAmBD,GApBD;AAqBD,CA5ED","file":"annotations.tests.js","sourcesContent":["import chai from 'chai';\r\nimport annotations from './annotations';\r\n\r\nchai.should();\r\nconst expect = chai.expect;\r\n\r\ndescribe('Annotations', () => {\r\n  describe('serializable', () => {\r\n    let mockJsonc;\r\n    beforeEach(()=> {\r\n      mockJsonc = {\r\n        register() {\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should register the supplied class', () => {\r\n      const testTypeName = 'Test';\r\n      let wasCalledWithClassAndTypeName = false;\r\n      const mockJsonc = { register: (constructor, typeName) => wasCalledWithClassAndTypeName = constructor.name ==='TestClass' && typeName === testTypeName};\r\n      const { serializable } = annotations(mockJsonc);\r\n\r\n      @serializable(testTypeName)\r\n      class TestClass {\r\n      }\r\n\r\n      wasCalledWithClassAndTypeName.should.be.true;\r\n    });\r\n\r\n    it('should register the supplied class with options', () => {\r\n      const testTypeName = 'Test';\r\n      const testOptions = {};\r\n      let wasCalledWithAllArguments = false;\r\n      const mockJsonc = { register: (constructor, typeName, options) => wasCalledWithAllArguments = constructor.name ==='TestClass' && typeName === testTypeName && options === testOptions};\r\n      const { serializable } = annotations(mockJsonc);\r\n\r\n      @serializable(testTypeName, testOptions)\r\n      class TestClass {\r\n      }\r\n\r\n      wasCalledWithAllArguments.should.be.true;\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      serializable.should.throw(/type name must be supplied/);\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      try {\r\n        @serializable\r\n        class TestClass {\r\n        }\r\n      } catch (ex) {\r\n        ex.message.should.match(/type name must be supplied/);\r\n      }\r\n    });\r\n  });\r\n  describe('include', () => {\r\n    it('should register the function', (done) => {\r\n\r\n      const mockJsonc = {\r\n        registerFunction: (fn, type, key) => {\r\n          expect(fn).to.be.a('function');\r\n          expect(fn.name).to.equal('testFunction');\r\n          expect(type.constructor.name).to.equal('TestClass');\r\n          expect(key).to.equal('testFunction');\r\n          done();\r\n        }\r\n      };\r\n      const {include} = annotations(mockJsonc);\r\n\r\n      class TestClass {\r\n        @include\r\n        testFunction(){}\r\n      }\r\n\r\n    });\r\n  });\r\n});\r\n"]}
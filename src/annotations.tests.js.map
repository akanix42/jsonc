{"version":3,"sources":["annotations.tests.es6"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,eAAK,MAAL;;AAGA,SAAS,aAAT,EAAwB,YAAM;AAC5B,WAAS,cAAT,EAAyB,YAAM;AAC7B,QAAI,qBAAJ,CAD6B;AAE7B,eAAW,YAAK;AACd,kBAAY;AACV,sCAAW,EADD;OAAZ,CADc;KAAL,CAAX,CAF6B;;AAS7B,OAAG,oCAAH,EAAyC,YAAM;;;AAC7C,UAAM,eAAe,MAAf,CADuC;AAE7C,UAAI,gCAAgC,KAAhC,CAFyC;AAG7C,UAAM,YAAY,EAAE,UAAU,kBAAC,WAAD,EAAc,QAAd;iBAA2B,gCAAgC,YAAY,IAAZ,KAAoB,WAApB,IAAmC,aAAa,YAAb;SAA9F,EAAxB,CAHuC;;yBAIpB,2BAAY,SAAZ,EAJoB;;UAIrC,yCAJqC;UAOvC,oBADL,aAAa,YAAb,0BACK;;oBAPuC;;AAU7C,oCAA8B,MAA9B,CAAqC,EAArC,CAAwC,IAAxC,CAV6C;KAAN,CAAzC,CAT6B;;AAsB7B,OAAG,oDAAH,EAAyD,YAAM;0BACpC,6BADoC;;UACrD,0CADqD;;AAG7D,mBAAa,MAAb,CAAoB,KAApB,CAA0B,4BAA1B,EAH6D;KAAN,CAAzD,CAtB6B;;AA4B7B,OAAG,oDAAH,EAAyD,YAAM;0BACpC,6BADoC;;UACrD,0CADqD;;AAG7D,UAAI;;;YAEI,YADL,gCACK;;sBAFJ;OAAJ,CAIE,OAAO,EAAP,EAAW;AACX,WAAG,OAAH,CAAW,MAAX,CAAkB,KAAlB,CAAwB,4BAAxB,EADW;OAAX;KAPqD,CAAzD,CA5B6B;GAAN,CAAzB,CAD4B;CAAN,CAAxB","file":"annotations.tests.js","sourcesContent":["import 'babel-polyfill';\r\nimport chai from 'chai';\r\nimport annotations from './annotations';\r\nimport autobind from 'autobind-decorator'\r\n\r\nchai.should();\r\n\r\n\r\ndescribe('Annotations', () => {\r\n  describe('serializable', () => {\r\n    let mockJsonc;\r\n    beforeEach(()=> {\r\n      mockJsonc = {\r\n        register() {\r\n        }\r\n      };\r\n    });\r\n\r\n    it('should register the supplied class', () => {\r\n      const testTypeName = 'Test';\r\n      let wasCalledWithClassAndTypeName = false;\r\n      const mockJsonc = { register: (constructor, typeName) => wasCalledWithClassAndTypeName = constructor.name ==='TestClass' && typeName === testTypeName};\r\n      const { serializable } = annotations(mockJsonc);\r\n\r\n      @serializable(testTypeName)\r\n      class TestClass {\r\n      }\r\n\r\n      wasCalledWithClassAndTypeName.should.be.true;\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      serializable.should.throw(/type name must be supplied/);\r\n    });\r\n\r\n    it('should throw an error if no class name is supplied', () => {\r\n      const { serializable } = annotations();\r\n\r\n      try {\r\n        @serializable\r\n        class TestClass {\r\n        }\r\n      } catch (ex) {\r\n        ex.message.should.match(/type name must be supplied/);\r\n      }\r\n    });\r\n  });\r\n});"]}